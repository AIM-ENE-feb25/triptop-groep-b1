@startuml
skinparam classAttributeIconSize 0

interface IExternalServiceFacade {
  + searchTrips(SearchCriteria): List<TripResult>
  + bookTrip(BookingRequest): BookingConfirmation
  + cancelTrip(String bookingId): CancellationResult
}

class ExternalServiceFacade {
  - externalServices: List<IExternalService>
  + constructor(externalServices: List<IExternalService>)
  + searchTrips(SearchCriteria): List<TripResult>
  + bookTrip(BookingRequest): BookingConfirmation
  + cancelTrip(String bookingId): CancellationResult
  - validateRequest(Request): void
}

interface IExternalService {
  + execute(Request): Response
  + validate(Response): boolean
}

class TripAdvisorService {
  - apiClient: HttpClient
  - credentials: Credentials
  + execute(Request): Response
  + validate(Response): boolean
  - mapResponse(RawResponse): Response
}

class BookingService {
  - apiClient: HttpClient
  - credentials: Credentials
  + execute(Request): Response
  + validate(Response): boolean
  - mapResponse(RawResponse): Response
}



IExternalServiceFacade <|.. ExternalServiceFacade
IExternalService <|.. TripAdvisorService
IExternalService <|.. BookingService

ExternalServiceFacade --> IExternalService

note "Facade Pattern hides complexity\nof external service interactions" as N1
ExternalServiceFacade .. N1

note "Single Responsibility Principle:\nEach class has one reason to change" as N2
IExternalService .. N2


@enduml 